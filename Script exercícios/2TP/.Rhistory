dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
#Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = age, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Age", y = "VO2") +
ggtitle("Age vs. VO2")
reduced_dataset <- dataset[, c("gender", "Winter Training Camp", "altitude_results", "vo2_results", "hr_results")]
reduced_dataset <- dataset[, colnames("gender", "Winter Training Camp", "altitude_results", "vo2_results", "hr_results")]
reduced_dataset <- dataset[, c("gender", "Winter Training Camp", "altitude_results", "vo2_results", "hr_results")]
colnames(data)
reduced_dataset <- dataset[, c("gender", "Winter Training Camp", "altitude_results", "vo2_results", "hr_results")]
columns_to_remove <- c("genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results")
dataset <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(dataset)
columns_to_remove <- c("genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results")
dataset <- dataset[, colnames(dataset) %in% columns_to_remove]
#install.packages("caret")
library(caret)
library(ggplot2)
# 1.
# Definição do caminho em que se encontra o script
setwd("C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP")
#"/Users/fredol/Documents/isep/anadi23/Script exercícios/2TP"
#"C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP"
# Importação dos dados
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
# Verificação da dimensão do datasets
dimensao <- dim(dataset)
# Sumário estatístico dos dados
summary(dataset)
# 2.
# Conversão da data de nascimento para um tipo de Data no R
dataset$dob <- as.Date(dataset$dob)
# Cálculo da idade. Uso de 365.25 pelos anos bissextos a cada 4
dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
# Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
# 4.A)
# Identificação dos valores em falta
missing_values <- is.na(dataset)
# Contar o número de valores em falta para cada coluna
missing_count <- colSums(missing_values)
# Imprimir a contagem de valores em falta
print(missing_count)
# Remoção de linhas com valores em falta
clean_dataset <- na.omit(dataset)
# Dimensão do "cleared" dataset
print(dim(clean_dataset))
# 4.B) Analyzing the boxplot, it is possible to verify outliers on the altitude, vo2, hr
# 4.C)
# Remove the specified columns
columns_to_remove <- c("genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results")
dataset <- dataset[, colnames(dataset) %in% columns_to_remove]
View(clean_dataset)
#install.packages("caret")
library(caret)
library(ggplot2)
# 1.
# Definição do caminho em que se encontra o script
setwd("C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP")
#"/Users/fredol/Documents/isep/anadi23/Script exercícios/2TP"
#"C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP"
# Importação dos dados
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
# Verificação da dimensão do datasets
dimensao <- dim(dataset)
# Sumário estatístico dos dados
summary(dataset)
# 2.
# Conversão da data de nascimento para um tipo de Data no R
dataset$dob <- as.Date(dataset$dob)
# Cálculo da idade. Uso de 365.25 pelos anos bissextos a cada 4
dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
# Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
# 4.A)
# Identificação dos valores em falta
missing_values <- is.na(dataset)
# Contar o número de valores em falta para cada coluna
missing_count <- colSums(missing_values)
# Imprimir a contagem de valores em falta
print(missing_count)
# Remoção de linhas com valores em falta
clean_dataset <- na.omit(dataset)
# Dimensão do "cleared" dataset
print(dim(clean_dataset))
# 4.B) Analyzing the boxplot, it is possible to verify outliers on the altitude, vo2, hr
# 4.C)
# Remove the specified columns
columns_to_remove <- c("gender,Team,Background,Pro level,dob,Continents")
dataset <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(clean_dataset)
#install.packages("caret")
library(caret)
library(ggplot2)
# 1.
# Definição do caminho em que se encontra o script
setwd("C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP")
#"/Users/fredol/Documents/isep/anadi23/Script exercícios/2TP"
#"C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP"
# Importação dos dados
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
# Verificação da dimensão do datasets
dimensao <- dim(dataset)
# Sumário estatístico dos dados
summary(dataset)
# 2.
# Conversão da data de nascimento para um tipo de Data no R
dataset$dob <- as.Date(dataset$dob)
# Cálculo da idade. Uso de 365.25 pelos anos bissextos a cada 4
dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
# Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
# 4.A)
# Identificação dos valores em falta
missing_values <- is.na(dataset)
# Contar o número de valores em falta para cada coluna
missing_count <- colSums(missing_values)
# Imprimir a contagem de valores em falta
print(missing_count)
# Remoção de linhas com valores em falta
clean_dataset <- na.omit(dataset)
# Dimensão do "cleared" dataset
print(dim(clean_dataset))
# 4.B) Analyzing the boxplot, it is possible to verify outliers on the altitude, vo2, hr
# 4.C)
# Remove the specified columns
columns_to_remove <- c("gender,Team,Background,Pro level,dob,Continents")
dataset <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(clean_dataset)
View(missing_values)
View(missing_values)
View(clean_dataset)
columns_to_remove <- setdiff(colnames(dataset), c("genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results"))
dataset <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(clean_dataset)
dataset <- select(dataset, "genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results")
clean_dataset <- select(dataset, "genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results")
#install.packages("caret")
library(caret)
library(ggplot2)
library(dplyr)
# 1.
# Definição do caminho em que se encontra o script
setwd("C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP")
#"/Users/fredol/Documents/isep/anadi23/Script exercícios/2TP"
#"C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP"
# Importação dos dados
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
# Verificação da dimensão do datasets
dimensao <- dim(dataset)
# Sumário estatístico dos dados
summary(dataset)
# 2.
# Conversão da data de nascimento para um tipo de Data no R
dataset$dob <- as.Date(dataset$dob)
# Cálculo da idade. Uso de 365.25 pelos anos bissextos a cada 4
dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
# Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
# 4.A)
# Identificação dos valores em falta
missing_values <- is.na(dataset)
# Contar o número de valores em falta para cada coluna
missing_count <- colSums(missing_values)
# Imprimir a contagem de valores em falta
print(missing_count)
# Remoção de linhas com valores em falta
clean_dataset <- na.omit(dataset)
# Dimensão do "cleared" dataset
print(dim(clean_dataset))
# 4.B) Analyzing the boxplot, it is possible to verify outliers on the altitude, vo2, hr
# 4.C)
# Remove the specified columns
columns_to_remove <- setdiff(colnames(dataset), c("genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results"))
clean_dataset <- select(dataset, "genderWinter Training Camp", "altitude_results", "vo2_results", "hr_results")
View(clean_dataset)
View(clean_dataset)
columns_to_remove <- setdiff(colnames(dataset), c("gender, Winter Training Camp", "altitude_results", "vo2_results", "hr_results"))
dataset <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(clean_dataset)
View(dataset)
columns_to_remove <- setdiff(colnames(dataset), c("gender, Winter Training Camp", "altitude_results", "vo2_results", "hr_results"))
dataset2 <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(dataset2)
View(dataset)
#install.packages("caret")
library(caret)
library(ggplot2)
# 1.
# Definição do caminho em que se encontra o script
setwd("C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP")
#"/Users/fredol/Documents/isep/anadi23/Script exercícios/2TP"
#"C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP"
# Importação dos dados
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
# Verificação da dimensão do datasets
dimensao <- dim(dataset)
# Sumário estatístico dos dados
summary(dataset)
# 2.
# Conversão da data de nascimento para um tipo de Data no R
dataset$dob <- as.Date(dataset$dob)
# Cálculo da idade. Uso de 365.25 pelos anos bissextos a cada 4
dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
# Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
View(dataset)
# Remove the specified columns
columns_to_remove <- setdiff(colnames(dataset), c("gender, Winter Training Camp", "altitude_results", "vo2_results", "hr_results"))
dataset2 <- dataset[, !colnames(dataset) %in% columns_to_remove]
View(dataset2)
View(dataset)
missing_values <- is.na(dataset)
View(dataset)
missing_count <- colSums(missing_values)
clean_dataset <- na.omit(dataset)
View(dataset)
print(dim(clean_dataset))
View(dataset)
columns_to_remove <- setdiff(colnames(dataset), c("gender, Winter Training Camp", "altitude_results", "vo2_results", "hr_results"))
dataset <- dataset[, c("gender", "Winter Training Camp", "altitude_results", "vo2_results", "hr_results")]
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
dataset <- dataset[, c("gender", "Winter Training Camp", "altitude_results", "vo2_results", "hr_results")]
View(dataset)
dataset <- dataset[, c("gender", "Winter.Training.Camp", "altitude_results", "vo2_results", "hr_results")]
View(dataset)
View(dataset)
#install.packages("caret")
library(caret)
library(ggplot2)
# 1.
# Definição do caminho em que se encontra o script
setwd("C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP")
#"/Users/fredol/Documents/isep/anadi23/Script exercícios/2TP"
#"C:/Users/franc/Documents/Repositórios/anadi23/Script exercícios/2TP"
# Importação dos dados
dataset <- read.csv("ciclismo.csv", header = TRUE, stringsAsFactors = FALSE)
dataset <- dataset[, !colnames(dataset) %in% "ID"]
# Verificação da dimensão do datasets
dimensao <- dim(dataset)
# Sumário estatístico dos dados
summary(dataset)
# 2.
# Conversão da data de nascimento para um tipo de Data no R
dataset$dob <- as.Date(dataset$dob)
# Cálculo da idade. Uso de 365.25 pelos anos bissextos a cada 4
dataset$Age <- floor(as.integer(Sys.Date() - dataset$dob) / 365.25)
age <- dataset$Age
# Print para a consola das idades
print(age)
# 3.
# Seleção de atributos numericos
numerical_vars <- sapply(dataset, is.numeric)
# Boxplot para altitude, vo2, hr e age
boxplot(dataset[, numerical_vars], col = "lightblue", main = "O2 Related Attributes")
# Scatter Plots para os diferentes atributos e como se relacionam
ggplot(dataset, aes(x = altitude_results, y = vo2_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "VO2") +
ggtitle("Altitude vs. VO2 Plot")
ggplot(dataset, aes(x = altitude_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Altitude", y = "Heartrate") +
ggtitle("Altitude vs. Heartrate")
ggplot(dataset, aes(x = vo2_results, y = hr_results)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "VO2", y = "Heartrate") +
ggtitle("VO2 vs. Heartrate ")
# 4.A) Concluded to be not applicable
# Identificação dos valores em falta
missing_values <- is.na(dataset)
# Contar o número de valores em falta para cada coluna
missing_count <- colSums(missing_values)
# Imprimir a contagem de valores em falta
print(missing_count)
# Remoção de linhas com valores em falta
clean_dataset <- na.omit(dataset)
# Dimensão do "cleared" dataset
print(dim(clean_dataset))
# 4.B) Analyzing the boxplot, it is possible to verify outliers on the altitude, vo2, hr
# 4.C)
dataset <- dataset[, c("gender", "Winter.Training.Camp", "altitude_results", "vo2_results", "hr_results")]
dataset <- cbind(dataset, age)
View(dataset)
View(dataset)
View(clean_dataset)
View(clean_dataset)
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Perform Min-Max scaling on each numeric column
scaled_data <- as.data.frame(scale(numeric_data))
# Assign the scaled data back to the original dataset
dataset[, numeric_cols] <- scaled_data
View(scaled_data)
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Perform Min-Max scaling on each numeric column
scaled_data <- as.data.frame(lapply(numeric_data, function(x) {
(x - min(x)) / (max(x) - min(x))
}))
# Assign the scaled data back to the original dataset
dataset[, numeric_cols] <- scaled_data
View(scaled_data)
View(dataset)
cor_matrix <- cor(dataset)
# Assuming your clean dataset is stored in the variable "dataset"
# Select only the numeric columns
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Check for missing values and impute if necessary
if (any(is.na(numeric_data))) {
numeric_data <- na.omit(numeric_data)  # Remove rows with missing values
# Alternatively, you can use other imputation methods to fill missing values
}
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data)
# Create a correlation heatmap
heatmap(cor_matrix,
col = colorRampPalette(c("#BBDEFB", "#2196F3", "#0D47A1"))(100),
main = "Correlation Heatmap",
xlab = "Variables",
ylab = "Variables")
cor_matrix <- cor(dataset)
# Assuming your clean dataset is stored in the variable "dataset"
# Select only the numeric columns
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Check for missing values and impute if necessary
if (any(is.na(numeric_data))) {
numeric_data <- na.omit(numeric_data)  # Remove rows with missing values
# Alternatively, you can use other imputation methods to fill missing values
}
cor_matrix <- cor(dataset)
corrplot(cor_matrix, method = "number",
type = "upper", order = "hclust",
tl.cex = 0.8, tl.col = "black",
diag = FALSE)
library(corrplot)
# Select only the numeric columns
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Check for missing values and impute if necessary
if (any(is.na(numeric_data))) {
numeric_data <- na.omit(numeric_data)  # Remove rows with missing values
# Alternatively, you can use other imputation methods to fill missing values
}
cor_matrix <- cor(dataset)
# Select only the numeric columns
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Check for missing values and impute if necessary
if (any(is.na(numeric_data))) {
numeric_data <- na.omit(numeric_data)  # Remove rows with missing values
# Alternatively, you can use other imputation methods to fill missing values
}
cor_matrix <- cor(dataset)
################################################################################
numeric_cols <- sapply(dataset, is.numeric)
numeric_data <- dataset[, numeric_cols]
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data)
# Create a correlation plot with numeric values
corrplot(cor_matrix, method = "number",
type = "upper", order = "hclust",
tl.cex = 0.8, tl.col = "black",
diag = FALSE)
